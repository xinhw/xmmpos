package com.rankway.controller.persistence.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.rankway.controller.persistence.entity.QrBlackListEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QR_BLACK_LIST_ENTITY".
*/
public class QrBlackListEntityDao extends AbstractDao<QrBlackListEntity, Long> {

    public static final String TABLENAME = "QR_BLACK_LIST_ENTITY";

    /**
     * Properties of entity QrBlackListEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SystemId = new Property(1, int.class, "systemId", false, "SYSTEM_ID");
        public final static Property QrType = new Property(2, int.class, "qrType", false, "QR_TYPE");
        public final static Property UserId = new Property(3, String.class, "userId", false, "USER_ID");
        public final static Property Department = new Property(4, String.class, "department", false, "DEPARTMENT");
        public final static Property Gno = new Property(5, String.class, "gno", false, "GNO");
        public final static Property StatusId = new Property(6, int.class, "statusId", false, "STATUS_ID");
        public final static Property Timestamp = new Property(7, long.class, "timestamp", false, "TIMESTAMP");
    }


    public QrBlackListEntityDao(DaoConfig config) {
        super(config);
    }
    
    public QrBlackListEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QR_BLACK_LIST_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SYSTEM_ID\" INTEGER NOT NULL ," + // 1: systemId
                "\"QR_TYPE\" INTEGER NOT NULL ," + // 2: qrType
                "\"USER_ID\" TEXT," + // 3: userId
                "\"DEPARTMENT\" TEXT," + // 4: department
                "\"GNO\" TEXT," + // 5: gno
                "\"STATUS_ID\" INTEGER NOT NULL ," + // 6: statusId
                "\"TIMESTAMP\" INTEGER NOT NULL );"); // 7: timestamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QR_BLACK_LIST_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, QrBlackListEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSystemId());
        stmt.bindLong(3, entity.getQrType());
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(4, userId);
        }
 
        String department = entity.getDepartment();
        if (department != null) {
            stmt.bindString(5, department);
        }
 
        String gno = entity.getGno();
        if (gno != null) {
            stmt.bindString(6, gno);
        }
        stmt.bindLong(7, entity.getStatusId());
        stmt.bindLong(8, entity.getTimestamp());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, QrBlackListEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSystemId());
        stmt.bindLong(3, entity.getQrType());
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(4, userId);
        }
 
        String department = entity.getDepartment();
        if (department != null) {
            stmt.bindString(5, department);
        }
 
        String gno = entity.getGno();
        if (gno != null) {
            stmt.bindString(6, gno);
        }
        stmt.bindLong(7, entity.getStatusId());
        stmt.bindLong(8, entity.getTimestamp());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public QrBlackListEntity readEntity(Cursor cursor, int offset) {
        QrBlackListEntity entity = new QrBlackListEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // systemId
            cursor.getInt(offset + 2), // qrType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // department
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // gno
            cursor.getInt(offset + 6), // statusId
            cursor.getLong(offset + 7) // timestamp
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, QrBlackListEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSystemId(cursor.getInt(offset + 1));
        entity.setQrType(cursor.getInt(offset + 2));
        entity.setUserId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDepartment(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGno(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStatusId(cursor.getInt(offset + 6));
        entity.setTimestamp(cursor.getLong(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(QrBlackListEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(QrBlackListEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(QrBlackListEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
