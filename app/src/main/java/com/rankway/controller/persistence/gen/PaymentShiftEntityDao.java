package com.rankway.controller.persistence.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.rankway.controller.persistence.entity.PaymentShiftEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PAYMENT_SHIFT_ENTITY".
*/
public class PaymentShiftEntityDao extends AbstractDao<PaymentShiftEntity, Long> {

    public static final String TABLENAME = "PAYMENT_SHIFT_ENTITY";

    /**
     * Properties of entity PaymentShiftEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PosNo = new Property(1, String.class, "posNo", false, "POS_NO");
        public final static Property OperatorNo = new Property(2, String.class, "operatorNo", false, "OPERATOR_NO");
        public final static Property ShiftOnAuditNo = new Property(3, long.class, "shiftOnAuditNo", false, "SHIFT_ON_AUDIT_NO");
        public final static Property ShiftOnTime = new Property(4, long.class, "shiftOnTime", false, "SHIFT_ON_TIME");
        public final static Property ShiftOffAuditNo = new Property(5, long.class, "shiftOffAuditNo", false, "SHIFT_OFF_AUDIT_NO");
        public final static Property ShiftOffTime = new Property(6, long.class, "shiftOffTime", false, "SHIFT_OFF_TIME");
        public final static Property ReportTime = new Property(7, long.class, "reportTime", false, "REPORT_TIME");
        public final static Property SubCardCount = new Property(8, int.class, "subCardCount", false, "SUB_CARD_COUNT");
        public final static Property SubCardAmount = new Property(9, long.class, "subCardAmount", false, "SUB_CARD_AMOUNT");
        public final static Property SubQrCount = new Property(10, int.class, "subQrCount", false, "SUB_QR_COUNT");
        public final static Property SubQrAmount = new Property(11, long.class, "subQrAmount", false, "SUB_QR_AMOUNT");
        public final static Property Status = new Property(12, int.class, "status", false, "STATUS");
        public final static Property ShiftNo = new Property(13, String.class, "shiftNo", false, "SHIFT_NO");
    }


    public PaymentShiftEntityDao(DaoConfig config) {
        super(config);
    }
    
    public PaymentShiftEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PAYMENT_SHIFT_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"POS_NO\" TEXT," + // 1: posNo
                "\"OPERATOR_NO\" TEXT," + // 2: operatorNo
                "\"SHIFT_ON_AUDIT_NO\" INTEGER NOT NULL ," + // 3: shiftOnAuditNo
                "\"SHIFT_ON_TIME\" INTEGER NOT NULL ," + // 4: shiftOnTime
                "\"SHIFT_OFF_AUDIT_NO\" INTEGER NOT NULL ," + // 5: shiftOffAuditNo
                "\"SHIFT_OFF_TIME\" INTEGER NOT NULL ," + // 6: shiftOffTime
                "\"REPORT_TIME\" INTEGER NOT NULL ," + // 7: reportTime
                "\"SUB_CARD_COUNT\" INTEGER NOT NULL ," + // 8: subCardCount
                "\"SUB_CARD_AMOUNT\" INTEGER NOT NULL ," + // 9: subCardAmount
                "\"SUB_QR_COUNT\" INTEGER NOT NULL ," + // 10: subQrCount
                "\"SUB_QR_AMOUNT\" INTEGER NOT NULL ," + // 11: subQrAmount
                "\"STATUS\" INTEGER NOT NULL ," + // 12: status
                "\"SHIFT_NO\" TEXT);"); // 13: shiftNo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PAYMENT_SHIFT_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PaymentShiftEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String posNo = entity.getPosNo();
        if (posNo != null) {
            stmt.bindString(2, posNo);
        }
 
        String operatorNo = entity.getOperatorNo();
        if (operatorNo != null) {
            stmt.bindString(3, operatorNo);
        }
        stmt.bindLong(4, entity.getShiftOnAuditNo());
        stmt.bindLong(5, entity.getShiftOnTime());
        stmt.bindLong(6, entity.getShiftOffAuditNo());
        stmt.bindLong(7, entity.getShiftOffTime());
        stmt.bindLong(8, entity.getReportTime());
        stmt.bindLong(9, entity.getSubCardCount());
        stmt.bindLong(10, entity.getSubCardAmount());
        stmt.bindLong(11, entity.getSubQrCount());
        stmt.bindLong(12, entity.getSubQrAmount());
        stmt.bindLong(13, entity.getStatus());
 
        String shiftNo = entity.getShiftNo();
        if (shiftNo != null) {
            stmt.bindString(14, shiftNo);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PaymentShiftEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String posNo = entity.getPosNo();
        if (posNo != null) {
            stmt.bindString(2, posNo);
        }
 
        String operatorNo = entity.getOperatorNo();
        if (operatorNo != null) {
            stmt.bindString(3, operatorNo);
        }
        stmt.bindLong(4, entity.getShiftOnAuditNo());
        stmt.bindLong(5, entity.getShiftOnTime());
        stmt.bindLong(6, entity.getShiftOffAuditNo());
        stmt.bindLong(7, entity.getShiftOffTime());
        stmt.bindLong(8, entity.getReportTime());
        stmt.bindLong(9, entity.getSubCardCount());
        stmt.bindLong(10, entity.getSubCardAmount());
        stmt.bindLong(11, entity.getSubQrCount());
        stmt.bindLong(12, entity.getSubQrAmount());
        stmt.bindLong(13, entity.getStatus());
 
        String shiftNo = entity.getShiftNo();
        if (shiftNo != null) {
            stmt.bindString(14, shiftNo);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PaymentShiftEntity readEntity(Cursor cursor, int offset) {
        PaymentShiftEntity entity = new PaymentShiftEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // posNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // operatorNo
            cursor.getLong(offset + 3), // shiftOnAuditNo
            cursor.getLong(offset + 4), // shiftOnTime
            cursor.getLong(offset + 5), // shiftOffAuditNo
            cursor.getLong(offset + 6), // shiftOffTime
            cursor.getLong(offset + 7), // reportTime
            cursor.getInt(offset + 8), // subCardCount
            cursor.getLong(offset + 9), // subCardAmount
            cursor.getInt(offset + 10), // subQrCount
            cursor.getLong(offset + 11), // subQrAmount
            cursor.getInt(offset + 12), // status
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // shiftNo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PaymentShiftEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPosNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOperatorNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setShiftOnAuditNo(cursor.getLong(offset + 3));
        entity.setShiftOnTime(cursor.getLong(offset + 4));
        entity.setShiftOffAuditNo(cursor.getLong(offset + 5));
        entity.setShiftOffTime(cursor.getLong(offset + 6));
        entity.setReportTime(cursor.getLong(offset + 7));
        entity.setSubCardCount(cursor.getInt(offset + 8));
        entity.setSubCardAmount(cursor.getLong(offset + 9));
        entity.setSubQrCount(cursor.getInt(offset + 10));
        entity.setSubQrAmount(cursor.getLong(offset + 11));
        entity.setStatus(cursor.getInt(offset + 12));
        entity.setShiftNo(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PaymentShiftEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PaymentShiftEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PaymentShiftEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
