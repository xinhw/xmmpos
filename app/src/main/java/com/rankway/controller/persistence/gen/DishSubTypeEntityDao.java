package com.rankway.controller.persistence.gen;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.rankway.controller.persistence.entity.DishSubTypeEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DISH_SUB_TYPE_ENTITY".
*/
public class DishSubTypeEntityDao extends AbstractDao<DishSubTypeEntity, Long> {

    public static final String TABLENAME = "DISH_SUB_TYPE_ENTITY";

    /**
     * Properties of entity DishSubTypeEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DishSubTypeCode = new Property(1, String.class, "dishSubTypeCode", false, "DISH_SUB_TYPE_CODE");
        public final static Property DishSubTypeName = new Property(2, String.class, "dishSubTypeName", false, "DISH_SUB_TYPE_NAME");
        public final static Property Status = new Property(3, int.class, "status", false, "STATUS");
        public final static Property Timestamp = new Property(4, long.class, "timestamp", false, "TIMESTAMP");
        public final static Property TypeId = new Property(5, long.class, "typeId", false, "TYPE_ID");
    }

    private DaoSession daoSession;

    private Query<DishSubTypeEntity> dishTypeEntity_DishSubTypesQuery;

    public DishSubTypeEntityDao(DaoConfig config) {
        super(config);
    }
    
    public DishSubTypeEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DISH_SUB_TYPE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DISH_SUB_TYPE_CODE\" TEXT," + // 1: dishSubTypeCode
                "\"DISH_SUB_TYPE_NAME\" TEXT," + // 2: dishSubTypeName
                "\"STATUS\" INTEGER NOT NULL ," + // 3: status
                "\"TIMESTAMP\" INTEGER NOT NULL ," + // 4: timestamp
                "\"TYPE_ID\" INTEGER NOT NULL );"); // 5: typeId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DISH_SUB_TYPE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DishSubTypeEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String dishSubTypeCode = entity.getDishSubTypeCode();
        if (dishSubTypeCode != null) {
            stmt.bindString(2, dishSubTypeCode);
        }
 
        String dishSubTypeName = entity.getDishSubTypeName();
        if (dishSubTypeName != null) {
            stmt.bindString(3, dishSubTypeName);
        }
        stmt.bindLong(4, entity.getStatus());
        stmt.bindLong(5, entity.getTimestamp());
        stmt.bindLong(6, entity.getTypeId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DishSubTypeEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String dishSubTypeCode = entity.getDishSubTypeCode();
        if (dishSubTypeCode != null) {
            stmt.bindString(2, dishSubTypeCode);
        }
 
        String dishSubTypeName = entity.getDishSubTypeName();
        if (dishSubTypeName != null) {
            stmt.bindString(3, dishSubTypeName);
        }
        stmt.bindLong(4, entity.getStatus());
        stmt.bindLong(5, entity.getTimestamp());
        stmt.bindLong(6, entity.getTypeId());
    }

    @Override
    protected final void attachEntity(DishSubTypeEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DishSubTypeEntity readEntity(Cursor cursor, int offset) {
        DishSubTypeEntity entity = new DishSubTypeEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // dishSubTypeCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // dishSubTypeName
            cursor.getInt(offset + 3), // status
            cursor.getLong(offset + 4), // timestamp
            cursor.getLong(offset + 5) // typeId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DishSubTypeEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDishSubTypeCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDishSubTypeName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStatus(cursor.getInt(offset + 3));
        entity.setTimestamp(cursor.getLong(offset + 4));
        entity.setTypeId(cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DishSubTypeEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DishSubTypeEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DishSubTypeEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "dishSubTypes" to-many relationship of DishTypeEntity. */
    public List<DishSubTypeEntity> _queryDishTypeEntity_DishSubTypes(long typeId) {
        synchronized (this) {
            if (dishTypeEntity_DishSubTypesQuery == null) {
                QueryBuilder<DishSubTypeEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TypeId.eq(null));
                dishTypeEntity_DishSubTypesQuery = queryBuilder.build();
            }
        }
        Query<DishSubTypeEntity> query = dishTypeEntity_DishSubTypesQuery.forCurrentThread();
        query.setParameter(0, typeId);
        return query.list();
    }

}
