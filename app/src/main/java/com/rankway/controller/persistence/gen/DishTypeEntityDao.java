package com.rankway.controller.persistence.gen;import android.database.Cursor;import android.database.sqlite.SQLiteStatement;import com.rankway.controller.persistence.entity.DishTypeEntity;import org.greenrobot.greendao.AbstractDao;import org.greenrobot.greendao.Property;import org.greenrobot.greendao.database.Database;import org.greenrobot.greendao.database.DatabaseStatement;import org.greenrobot.greendao.internal.DaoConfig;// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT./**  * DAO for table "DISH_TYPE_ENTITY".*/public class DishTypeEntityDao extends AbstractDao<DishTypeEntity, Long> {    public static final String TABLENAME = "DISH_TYPE_ENTITY";    /**     * Properties of entity DishTypeEntity.<br/>     * Can be used for QueryBuilder and for referencing column names.     */    public static class Properties {        public final static Property Id = new Property(0, Long.class, "id", true, "_id");        public final static Property DishTypeCode = new Property(1, String.class, "dishTypeCode", false, "DISH_TYPE_CODE");        public final static Property DishTypeName = new Property(2, String.class, "dishTypeName", false, "DISH_TYPE_NAME");        public final static Property Status = new Property(3, int.class, "status", false, "STATUS");        public final static Property Timestamp = new Property(4, long.class, "timestamp", false, "TIMESTAMP");    }    private DaoSession daoSession;    public DishTypeEntityDao(DaoConfig config) {        super(config);    }        public DishTypeEntityDao(DaoConfig config, DaoSession daoSession) {        super(config, daoSession);        this.daoSession = daoSession;    }    /** Creates the underlying database table. */    public static void createTable(Database db, boolean ifNotExists) {        String constraint = ifNotExists? "IF NOT EXISTS ": "";        db.execSQL("CREATE TABLE " + constraint + "\"DISH_TYPE_ENTITY\" (" + //                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id                "\"DISH_TYPE_CODE\" TEXT," + // 1: dishTypeCode                "\"DISH_TYPE_NAME\" TEXT," + // 2: dishTypeName                "\"STATUS\" INTEGER NOT NULL ," + // 3: status                "\"TIMESTAMP\" INTEGER NOT NULL );"); // 4: timestamp    }    /** Drops the underlying database table. */    public static void dropTable(Database db, boolean ifExists) {        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DISH_TYPE_ENTITY\"";        db.execSQL(sql);    }    @Override    protected final void bindValues(DatabaseStatement stmt, DishTypeEntity entity) {        stmt.clearBindings();         Long id = entity.getId();        if (id != null) {            stmt.bindLong(1, id);        }         String dishTypeCode = entity.getDishTypeCode();        if (dishTypeCode != null) {            stmt.bindString(2, dishTypeCode);        }         String dishTypeName = entity.getDishTypeName();        if (dishTypeName != null) {            stmt.bindString(3, dishTypeName);        }        stmt.bindLong(4, entity.getStatus());        stmt.bindLong(5, entity.getTimestamp());    }    @Override    protected final void bindValues(SQLiteStatement stmt, DishTypeEntity entity) {        stmt.clearBindings();         Long id = entity.getId();        if (id != null) {            stmt.bindLong(1, id);        }         String dishTypeCode = entity.getDishTypeCode();        if (dishTypeCode != null) {            stmt.bindString(2, dishTypeCode);        }         String dishTypeName = entity.getDishTypeName();        if (dishTypeName != null) {            stmt.bindString(3, dishTypeName);        }        stmt.bindLong(4, entity.getStatus());        stmt.bindLong(5, entity.getTimestamp());    }    @Override    protected final void attachEntity(DishTypeEntity entity) {        super.attachEntity(entity);        entity.__setDaoSession(daoSession);    }    @Override    public Long readKey(Cursor cursor, int offset) {        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);    }        @Override    public DishTypeEntity readEntity(Cursor cursor, int offset) {        DishTypeEntity entity = new DishTypeEntity( //            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // dishTypeCode            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // dishTypeName            cursor.getInt(offset + 3), // status            cursor.getLong(offset + 4) // timestamp        );        return entity;    }         @Override    public void readEntity(Cursor cursor, DishTypeEntity entity, int offset) {        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));        entity.setDishTypeCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));        entity.setDishTypeName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));        entity.setStatus(cursor.getInt(offset + 3));        entity.setTimestamp(cursor.getLong(offset + 4));     }        @Override    protected final Long updateKeyAfterInsert(DishTypeEntity entity, long rowId) {        entity.setId(rowId);        return rowId;    }        @Override    public Long getKey(DishTypeEntity entity) {        if(entity != null) {            return entity.getId();        } else {            return null;        }    }    @Override    public boolean hasKey(DishTypeEntity entity) {        return entity.getId() != null;    }    @Override    protected final boolean isEntityUpdateable() {        return true;    }    }