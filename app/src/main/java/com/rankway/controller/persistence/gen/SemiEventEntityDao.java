package com.rankway.controller.persistence.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.rankway.controller.persistence.entity.SemiEventEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SEMI_EVENT_ENTITY".
*/
public class SemiEventEntityDao extends AbstractDao<SemiEventEntity, Long> {

    public static final String TABLENAME = "SEMI_EVENT_ENTITY";

    /**
     * Properties of entity SemiEventEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property EventTime = new Property(1, long.class, "eventTime", false, "EVENT_TIME");
        public final static Property EventLevel = new Property(2, int.class, "eventLevel", false, "EVENT_LEVEL");
        public final static Property Process = new Property(3, String.class, "process", false, "PROCESS");
        public final static Property ProjectInfoId = new Property(4, long.class, "projectInfoId", false, "PROJECT_INFO_ID");
        public final static Property Description = new Property(5, String.class, "description", false, "DESCRIPTION");
        public final static Property Status = new Property(6, int.class, "status", false, "STATUS");
    }


    public SemiEventEntityDao(DaoConfig config) {
        super(config);
    }
    
    public SemiEventEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SEMI_EVENT_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"EVENT_TIME\" INTEGER NOT NULL ," + // 1: eventTime
                "\"EVENT_LEVEL\" INTEGER NOT NULL ," + // 2: eventLevel
                "\"PROCESS\" TEXT," + // 3: process
                "\"PROJECT_INFO_ID\" INTEGER NOT NULL ," + // 4: projectInfoId
                "\"DESCRIPTION\" TEXT," + // 5: description
                "\"STATUS\" INTEGER NOT NULL );"); // 6: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SEMI_EVENT_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SemiEventEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getEventTime());
        stmt.bindLong(3, entity.getEventLevel());
 
        String process = entity.getProcess();
        if (process != null) {
            stmt.bindString(4, process);
        }
        stmt.bindLong(5, entity.getProjectInfoId());
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(6, description);
        }
        stmt.bindLong(7, entity.getStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SemiEventEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getEventTime());
        stmt.bindLong(3, entity.getEventLevel());
 
        String process = entity.getProcess();
        if (process != null) {
            stmt.bindString(4, process);
        }
        stmt.bindLong(5, entity.getProjectInfoId());
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(6, description);
        }
        stmt.bindLong(7, entity.getStatus());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SemiEventEntity readEntity(Cursor cursor, int offset) {
        SemiEventEntity entity = new SemiEventEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // eventTime
            cursor.getInt(offset + 2), // eventLevel
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // process
            cursor.getLong(offset + 4), // projectInfoId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // description
            cursor.getInt(offset + 6) // status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SemiEventEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEventTime(cursor.getLong(offset + 1));
        entity.setEventLevel(cursor.getInt(offset + 2));
        entity.setProcess(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProjectInfoId(cursor.getLong(offset + 4));
        entity.setDescription(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStatus(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SemiEventEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SemiEventEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SemiEventEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
