package com.rankway.controller.persistence.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.rankway.controller.persistence.entity.PaymentTotal;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PAYMENT_TOTAL".
*/
public class PaymentTotalDao extends AbstractDao<PaymentTotal, Long> {

    public static final String TABLENAME = "PAYMENT_TOTAL";

    /**
     * Properties of entity PaymentTotal.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PosNo = new Property(1, String.class, "posNo", false, "POS_NO");
        public final static Property PosSerial = new Property(2, long.class, "posSerial", false, "POS_SERIAL");
        public final static Property TransLocalTime = new Property(3, String.class, "transLocalTime", false, "TRANS_LOCAL_TIME");
        public final static Property SiteVersion = new Property(4, String.class, "siteVersion", false, "SITE_VERSION");
        public final static Property RecordId = new Property(5, long.class, "recordId", false, "RECORD_ID");
        public final static Property UploadFlag = new Property(6, int.class, "uploadFlag", false, "UPLOAD_FLAG");
        public final static Property Timestamp = new Property(7, long.class, "timestamp", false, "TIMESTAMP");
    }

    private DaoSession daoSession;


    public PaymentTotalDao(DaoConfig config) {
        super(config);
    }
    
    public PaymentTotalDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PAYMENT_TOTAL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"POS_NO\" TEXT," + // 1: posNo
                "\"POS_SERIAL\" INTEGER NOT NULL ," + // 2: posSerial
                "\"TRANS_LOCAL_TIME\" TEXT," + // 3: transLocalTime
                "\"SITE_VERSION\" TEXT," + // 4: siteVersion
                "\"RECORD_ID\" INTEGER NOT NULL ," + // 5: recordId
                "\"UPLOAD_FLAG\" INTEGER NOT NULL ," + // 6: uploadFlag
                "\"TIMESTAMP\" INTEGER NOT NULL );"); // 7: timestamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PAYMENT_TOTAL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PaymentTotal entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String posNo = entity.getPosNo();
        if (posNo != null) {
            stmt.bindString(2, posNo);
        }
        stmt.bindLong(3, entity.getPosSerial());
 
        String transLocalTime = entity.getTransLocalTime();
        if (transLocalTime != null) {
            stmt.bindString(4, transLocalTime);
        }
 
        String siteVersion = entity.getSiteVersion();
        if (siteVersion != null) {
            stmt.bindString(5, siteVersion);
        }
        stmt.bindLong(6, entity.getRecordId());
        stmt.bindLong(7, entity.getUploadFlag());
        stmt.bindLong(8, entity.getTimestamp());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PaymentTotal entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String posNo = entity.getPosNo();
        if (posNo != null) {
            stmt.bindString(2, posNo);
        }
        stmt.bindLong(3, entity.getPosSerial());
 
        String transLocalTime = entity.getTransLocalTime();
        if (transLocalTime != null) {
            stmt.bindString(4, transLocalTime);
        }
 
        String siteVersion = entity.getSiteVersion();
        if (siteVersion != null) {
            stmt.bindString(5, siteVersion);
        }
        stmt.bindLong(6, entity.getRecordId());
        stmt.bindLong(7, entity.getUploadFlag());
        stmt.bindLong(8, entity.getTimestamp());
    }

    @Override
    protected final void attachEntity(PaymentTotal entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PaymentTotal readEntity(Cursor cursor, int offset) {
        PaymentTotal entity = new PaymentTotal( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // posNo
            cursor.getLong(offset + 2), // posSerial
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // transLocalTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // siteVersion
            cursor.getLong(offset + 5), // recordId
            cursor.getInt(offset + 6), // uploadFlag
            cursor.getLong(offset + 7) // timestamp
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PaymentTotal entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPosNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPosSerial(cursor.getLong(offset + 2));
        entity.setTransLocalTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSiteVersion(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRecordId(cursor.getLong(offset + 5));
        entity.setUploadFlag(cursor.getInt(offset + 6));
        entity.setTimestamp(cursor.getLong(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PaymentTotal entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PaymentTotal entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PaymentTotal entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
