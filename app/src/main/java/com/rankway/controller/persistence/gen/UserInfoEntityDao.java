package com.rankway.controller.persistence.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.rankway.controller.persistence.entity.UserInfoEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO_ENTITY".
*/
public class UserInfoEntityDao extends AbstractDao<UserInfoEntity, Long> {

    public static final String TABLENAME = "USER_INFO_ENTITY";

    /**
     * Properties of entity UserInfoEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserCode = new Property(1, String.class, "userCode", false, "USER_CODE");
        public final static Property UserName = new Property(2, String.class, "userName", false, "USER_NAME");
        public final static Property UserPassword = new Property(3, String.class, "userPassword", false, "USER_PASSWORD");
        public final static Property UserNote = new Property(4, String.class, "userNote", false, "USER_NOTE");
        public final static Property OptType = new Property(5, int.class, "optType", false, "OPT_TYPE");
        public final static Property SysScope = new Property(6, String.class, "sysScope", false, "SYS_SCOPE");
        public final static Property Timestamp = new Property(7, long.class, "timestamp", false, "TIMESTAMP");
    }


    public UserInfoEntityDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_CODE\" TEXT," + // 1: userCode
                "\"USER_NAME\" TEXT," + // 2: userName
                "\"USER_PASSWORD\" TEXT," + // 3: userPassword
                "\"USER_NOTE\" TEXT," + // 4: userNote
                "\"OPT_TYPE\" INTEGER NOT NULL ," + // 5: optType
                "\"SYS_SCOPE\" TEXT," + // 6: sysScope
                "\"TIMESTAMP\" INTEGER NOT NULL );"); // 7: timestamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfoEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userCode = entity.getUserCode();
        if (userCode != null) {
            stmt.bindString(2, userCode);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String userPassword = entity.getUserPassword();
        if (userPassword != null) {
            stmt.bindString(4, userPassword);
        }
 
        String userNote = entity.getUserNote();
        if (userNote != null) {
            stmt.bindString(5, userNote);
        }
        stmt.bindLong(6, entity.getOptType());
 
        String sysScope = entity.getSysScope();
        if (sysScope != null) {
            stmt.bindString(7, sysScope);
        }
        stmt.bindLong(8, entity.getTimestamp());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfoEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userCode = entity.getUserCode();
        if (userCode != null) {
            stmt.bindString(2, userCode);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String userPassword = entity.getUserPassword();
        if (userPassword != null) {
            stmt.bindString(4, userPassword);
        }
 
        String userNote = entity.getUserNote();
        if (userNote != null) {
            stmt.bindString(5, userNote);
        }
        stmt.bindLong(6, entity.getOptType());
 
        String sysScope = entity.getSysScope();
        if (sysScope != null) {
            stmt.bindString(7, sysScope);
        }
        stmt.bindLong(8, entity.getTimestamp());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserInfoEntity readEntity(Cursor cursor, int offset) {
        UserInfoEntity entity = new UserInfoEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userPassword
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userNote
            cursor.getInt(offset + 5), // optType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // sysScope
            cursor.getLong(offset + 7) // timestamp
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfoEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserPassword(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserNote(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOptType(cursor.getInt(offset + 5));
        entity.setSysScope(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTimestamp(cursor.getLong(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserInfoEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserInfoEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfoEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
